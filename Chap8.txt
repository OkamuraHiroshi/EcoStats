### 8章  シミュレーションと意思決定科学

## 8 - 1 シミュレーションモデルを作ろう！

library(mvtnorm)       # mvtnormパッケージを読み込む
library(TMB)         # TMBパッケージを読み込む
library(tidyverse)       # tidyverseパッケージを読み込む
load("res_ss.rda")       # 7章で作ったRファイルを読み込む
mu_p <- sdrep$par.fixed       # 7章の状態空間モデルから推定された固定効果パラメータ
Sigma_p <- sdrep$cov.fixed       # 状態空間モデルの固定効果の分散共分散
Cor_p <- cov2cor(Sigma_p)      # 分散共分散行列を相関行列に変換
Sim <- 100       # シミュレーション回数
gen_par <- rmvnorm(Sim, mu_p, Sigma_p)        # パラメータを多変量正規分布から発生

logit <- function(x) log(x/(1-x))      # ロジット変換をする関数を定義
ilogit <- function(x) 1/(1+exp(-x))       # ロジット逆変換をする関数を定義
pop_update <- function(p,x,eps) p[,1]+(1-p[,2])*x+eps       # 予測加入の対数値を計算する関数
transform_b <- function(pars, b_max, b_min){        # bに制約をいれる関数
  logit_b <- ifelse(pars$logit_b < logit(b_min), logit(b_min), ifelse(pars$logit_b > logit(b_max), logit(b_max), pars$logit_b))       # bに対する制約
  return(logit_b)     # logit(b)を戻す
}
make_b <- function(x) ilogit(x)     # bを与える関数（ここでは特に必要ないが，一般の再生産関係などで必要）
make_Umsy <- function(x,y) y        # Umsyを与える関数（ここでも特に必要はないが，一般には必要）
Pop_simulator <- function(parms, sdrep, dat, seed0=1, b_max=0.95, b_min=0.05, b_type="logit_b"){        # 個体数変化をシミュレーションするプログラム
  pars <- as.data.frame(parms)        # パラメータの行列をデータフレーム化
  Sim <- nrow(pars)        # シミュレーション回数はパラメータの行数
  nY <- dat$Y        # データの年数
  nT <- length(dat$CPUE)       # サンプルサイズ（漁獲が行われた週数の総和）
  n0 <- n_last <- matrix(NA, nrow=nY, ncol=Sim)        # 漁獲開始時の個体数と漁獲終了時の個体数（対数スケールで）
  n <- u <- matrix(NA, nrow=nT, ncol=Sim)       # 週ごとの個体数と漁獲率の変化
  log_r <- pars$log_r        # 増加率の対数値のパラメータ
  pars[,b_type] <- transform_b(pars, b_max, b_min)
  b <- make_b(pars[,b_type])
  sigma <- exp(pars$log_sigma)
  eps <- matrix(rnorm(nY*Sim,0,sigma),nrow=nY,ncol=Sim,byrow=TRUE)
  YEAR <- dat$YEAR+1
  START <- dat$START
  END <- dat$END
  U <- summary(sdrep)[rownames(summary(sdrep))=="U",]
  logit_U <- cbind(logit(U[,1]), (1/(U[,1]*(1-U[,1])))*U[,2])
  Umsy <- make_Umsy(log_r,b)
  set.seed(seed0)
  
  for (i in 1:nT){
      u[i,] <- ilogit(rnorm(Sim, logit_U[i,1], logit_U[i,2]))
      if (START[i]==1) {
        if (i==1) n0[YEAR[i],] <- pars$tilde_n0 else n0[YEAR[i],] <- pop_update(cbind(log_r,b),n_last[YEAR[i]-1,],eps[YEAR[i]-1,])
        n[i,] <- n0[YEAR[i],]
      }
      if (START[i]==0) n[i,] <- n[i-1,]+log(1-u[i-1,])
      if (END[i]==1) n_last[YEAR[i],] <- n[i,]+log(1-u[i,])
  }
  n0_new <- pop_update(cbind(log_r,b),n_last[nY,],eps[nY,])
  list(parms=pars, Umsy=Umsy, n0=n0, n_last=n_last, n0_new=n0_new, n=n, u=u)
}
pops <- Pop_simulator(gen_par, sdrep, dat_ss)


