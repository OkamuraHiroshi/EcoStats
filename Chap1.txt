### 1章  生物個体群データと統計学

## 1 - 2 確率と統計量

whale <- c(20,0,5,10,15)   #  whaleは5個の要素を持つベクトルとする

sum(whale)/length(whale)   #  whaleデータの平均値を計算．mean(whale)としても良い

whale2 <- c(20,0,5,10,1500)    #  whaleデータの最後の要素を100倍して1500にした

c(median(whale), median(whale2))    # whaleとwhale2の中央値を計算．平均なら大きく変わるが，中央値だと同じ

c(var(whale), var(whale2))    # whaleとwhale2の分散を比較

c(sd(whale), sd(whale2))    # whaleとwhale2の標準偏差を比較

( se <- c(sd(whale), sd(whale2))/sqrt(length(whale)) )    # whaleとwhale2の標準誤差を比較（代入式を丸括弧で囲めば，代入と同時に結果を表示する）

mu <- c(mean(whale), mean(whale2))   #  whaleとwhale2の平均値
( cv <- se/mu )    #  whaleとwhale2の平均の変動係数を比較

## 1 - 3 共分散と相関

library(MASS)     # MASSパッケージを使用可能にする
data(cats)     # MASSパッケージの中のcatsデータを読み込む．?catsでデータの中身を確認
dat <- cats    # catsデータをdatの中にコピーする（後で整形することを考えて．元のデータcatsはそのまま残して，datをいろいろ操作する）
plot(dat$Bwt, dat$Hwt, xlab="Body Weight", ylab="Heart Weight")    # x軸にBwt（体重量），y軸にHwt（心臓重量）として散布図を描画．軸のラベルを指定
cov(dat$Bwt, dat$Hwt)    #  BwtとHwtの共分散を計算

set.seed(1)     #  乱数発生のseedを設定．同じ結果の再現ができるようにするため
perm <- sample(nrow(dat))     # datの行数の数字をランダムに並べ替える
plot(dat$Bwt[perm], dat$Hwt, xlab="Body Weight", ylab="Heart Weight")    # 並べ替えたBwtとHwtをプロット
cov(dat$Bwt[perm], dat$Hwt)    # 並べ替えた場合の共分散（上と比較する）

cor(dat$Bwt, dat$Hwt)      # 元データの相関係数（cov(dat$Bwt/10, dat$Hwt/10）とした場合と，cor(dat$Bwt/10, dat$Hwt/10)で結果はどう異なるか比較してみよう
cor(dat$Bwt[perm], dat$Hwt)     # 並べ替えデータの相関係数

x <- seq(0,1,by=0.1)     # x軸の値 0から1まで0.1刻みで
y <- x*(1-x)    # yはxの二次式
plot(x, y, col="blue", pch=16)    # xとyをプロット
cor(x, y)    # xとyには明らかな関係があるが，直線関係ではないので相関は小さいという例（つまり，独立 -> 相関=0は成り立つが，相関=0 -> 独立は成り立たない）

( Sigma <- cov(cbind(dat$Bwt, dat$Hwt)) )   # BwtとHwtの分散共分散行列を評価

## 1 - 4 デルタ法

c(sd(log(dat$Hwt)), sd(dat$Hwt)/mean(dat$Hwt))    # 対数変換したHwtの標準偏差と変動係数はほぼ同じ値になる

D_f <- c(-1/mean(dat$Bwt), 1/mean(dat$Hwt))    # 対数差の値の偏微分（対数の微分は逆関数）
sigmasq_logHperB <- t(D_f)%*%Sigma%*%D_f     # 元の分散共分散行列に両側から偏微分を掛けてデルタ法による分散を評価
( sigma_logHperB <- sqrt(sigmasq_logHperB) )    # デルタ法による分散の平方根で標準誤差を計算
sd(log(dat$Hwt/dat$Bwt))    # 対数差の標準偏差を計算してデルタ法による近似計算がうまくいっているかどうか確認

## 1 - 5 条件付確率とベイズの定理

mat <- matrix(c(58,43,41,46,25,44), nrow=2, ncol=3)    # 性成熟に関する行列形式のデータ例
rownames(mat) <- c("immature","mature")      # 行のラベル
colnames(mat) <- c("1990-1999","2000-2009","2010-2019")       # 列のラベル

pmat <- mat/sum(mat)       # 全数で割って相対値を計算
print(mat)        # 絶対数の表示
print(round(pmat, 2))        # 相対値を表示（小数点以下2桁まで）

pmat_r <- rowSums(pmat)    # 相対値行列の行和計算
pmat_c <- colSums(pmat)    # 相対値行列の列和計算
c(pmat[1,1]/pmat_r[1], mat[1,1]/sum(mat[1,]))  # 未成熟だった場合の1990年代の割合
c(pmat[1,1]/pmat_c[1], mat[1,1]/sum(mat[,1]))  # 1990年代の未成熟の割合

p_imat <- sapply(1:3, function(i) pmat[1,i]/colSums(pmat)[i])    # Pr(X年代|未成熟): 尤度．sapplyは，sapply(x, function(x) ...)のような形で，xの各要素にfunction(x)を適用した結果を返す関数
prior <- c(1/3,1/3,1/3)     # Pr(X年代):事前分布
( post_bayes <- p_imat*prior/sum(p_imat*prior) )    # Pr(X年代|未成熟)=Pr(未成熟|X年代)*Pr(X年代)/Pr(未成熟)：ベイズの定理

## 1 - 6 ブートストラップとシミュレーション

set.seed(1)      # 乱数のseed設定
n <- length(whale)     # whaleデータのサンプルサイズ
Sim <- 1000      # シミュレーション回数
bs <- matrix(sample(whale, n*Sim, replace=TRUE), nrow=Sim, ncol=n)     # whaleデータをSim回分作成（Sim行n列の行列にする．sampleの引数replaceがTRUEなら復元抽出になる） 
bs_med <- apply(bs, 1, median)     # 各行の中央値を計算
barplot(table(bs_med))     # 中央値のbootstrapサンプルのヒストグラムを描画

p0 <- rowSums(mat)[2]/sum(mat)    #  全体の成熟割合を計算（帰無仮説）
p_b <- NULL    # ブートストラップ結果の入れ物
set.seed(1)    # 乱数のseedを決めることで再現性を確保
for (i in 1:1000){     # 1000回の繰り返し計算
  p <- table(sample(c(0,1),colSums(mat)[3],prob=c(1-p0,p0),replace=TRUE))    # 帰無仮説に従って，2010年代のデータと同じ観測数の未成熟・成熟個体を作ってやる
  p_b <- c(p_b, p[2]/sum(p))    # 帰無仮説に従う2010年代の成熟個体割合
}
p_obs <- mat[2,3]/colSums(mat)[3]    # 観測された2010年代の成熟個体割合
hist(p_b)     # 帰無仮説のもとでの成熟割合のヒストグラム（帰無分布）
abline(v = p_obs, col="blue", lwd=3)    # 観測割合をヒストグラム上に表示

# 大数の法則
set.seed(1)    # 乱数のseed設定
p <- 0.3     # 確率を0.3に設定
x <- sample(c(0,1),1000,prob=c(1-p,p),replace=TRUE)   #  確率pで1，(1-p)で0となる二値データを1000個作成
plot(1:1000,sapply(1:1000, function(i) mean(x[1:i])),xlab="Sample size",ylab="Mean",pch=16,col="blue")     # 最初の1個から1000個まで足し算するものを増やしていって個数が増えたら平均値がどうなるかを計算
abline(h=p,lty=2,lwd=2,col=gray(0.4))    # 真値の線を描く 
